
CST 136 - Assignment 2


----------

For this assignment you will create two classes:

  Array  -  a class that provides the same type of fuctionality as
            built-in arrays, but it allows for specifying lower
            and upper bound index values and uses dynamic memory.

  SafeArray  -  same functionality as Array but adds the additional
                behavior of index bounds checking.

Both of these classes are explained in detail below.

The declarations for both these classes should be in a header
file called array.h and the implementations can be in a
single .cpp file or in a seperate .cpp file for each class.

The data type of the elements stored in the Array or SafeArray
class should be declared using a typedef that can later be
changed. For example, if the element type is integer, you
could define a typedef this way in array.h:

  typedef  int  ELEMENT_TYPE;

Then if you later want the element type to be something other
than int, you should just have to change the ELEMENT_TYPE typedef
and recompile your array.cpp file. No other changes should be
required in the class code to change the element type.

When handing in the assignment have the element type set to
integer ... but I'd recommend testing using additional types.


The Array class
---------------
Create a class called Array that will provide the behavior similar to that
of normal array and can store elements. The array will have the following
features beyond that of a normal array:

  - When an array object is instantiated, lower and upper bound index values are
    specified. The lower index bound is defaulted to zero. No default for the
    upper index bound. Here is a few examples of instantiating Array objects:

       Array  values(10);
          //
          // Creates an 11 element array with a lower index of zero
          // and an upper index of 10.
          //

       Array  numbers(50, 45);
          //
          // Creates a six element array with a lower index of 45 and
          // an upper index of 50.
          //

    If the upper bound is less than the lower bound, display an error message
    and terminate the program.

  - Contiguous memory for array elements should be dynamically allocated when Array
    objects are instantiated and managed internally by the Array member functions.
    Only the exact amount of memory necessary to store the array elements should
    be allocated.

  - Array objects should be copy-safe. They should use a deep copy scheme
    so that array memory is duplicated when copies are made.


The Array class should provide at least the following public member
functionality:

  - A regular constructor that allows the caller to specify lower and upper bound
    index values. The lower bound index should be defaulted to zero. Bounds can
    be positive or negative. The lower bound index must be less-than-or-equal-to the
    upper bound index. The constructor should dynamically allocate all necessary
    memory for the array and rely on the elements' default constructor for
    initialization. If memory allocation fails, write a message to cout
    and terminate the program.

  - a deep-copy copy constructor and destructor for handling the dynamic memory
    management.

  - A set() function that will allow the caller to place an element value at a
    specific index position in the array.

  - A get() function that will allow the caller to fetch an element value from a
    specific index position within the array.

  - A lowerBound() function which returns the index for of the lower bound
    for the array.

  - A upperBound() function which returns the index of the upper bound
    for the array.

  - A numElements() function which returns the number of elements the array
    can hold.

  - A size() function which returns the number of bytes that were allocated
    to hold all the elements.

Here's some sample client calls to member functions for the Array objects created
above (these assume the element type is int):

      values.set(0, 21);
        //
        // Sets the first element in the "values" array to 21.
        //

      int  x = values.get(1);
        //
        // Fetches the value stored in the second element of the "values" array
        // and stores it in the variable called x.
        //

      numbers.set(45, 3);
        //
        // Stores the value of 3 in the first element in the "numbers" array.
        //



The SafeArray class
-------------------
Create a class called SafeArray that provides all the same functionality
as Array with the added behavior of providing index bounds checking when clients
are setting/retrieving element values. The public interface for clients of
SafeArray should be the same as Array. The behavior of the following member
functions change:

  - All indexing into the array (for reading or writing elements) will have
    bounds checking performed to ensure the index value is valid. Valid index
    values are greater-than-or-equal-to the lower bound AND less-than-or-equal-to
    the upper bound.

  - The set() function will still allow the caller to place an element at
    a specific index position in the array. If the index is out of range, the
    function should write an error message to the cout stream and terminate
    the program immediately.

  - The get() function will still allow the caller to fetch an element value
    from a specific index position within the array. If the array index is
    out of range, the function should write an error message to the cout
    stream and terminate the program immediately.

I'm expecting you to use inheritance for the implementation of the SafeArray class.



A few of the thing's I'll be looking for in this assignment
-----------------------------------------------------------

  - Proper use of header/body files. Put the class declarations in a
    header file (you can use one .h for both Array and SafeArray) and
    the definitions in a .cpp file (one for both is okay here too).

  - Proper use of encapsulation functionality (data member hiding/abstraction)

  - Proper use of dynamic memory:
      o  no memory leaks
      o  a correct "deep-copy" copy constructor
      o  checking for successful allocation
      o  no wasted memory

  - Proper use of inheritance. This includes:
      o  hiding of parent data that the child class doesn't need access to.
      o  chaining function calls by the child to eliminate the need for
         duplicate functionality in parent and child classes.

  - Proper const correct-ness for member functions.

  - Complete use of a typedef for the element type, such that by only
    changing the typedef and recompiling, the Array and SafeArray classes
    should be able to used with an element type other than int.

  - Use of member initialization in all constructors for the
    parent and child classes.

  - Good use of private member functions to modularize internal class functionality

  - Effiecient use of member variables (ie. no redundent values).

  - Good programming style (see the assignments web page for more information
    on style).
